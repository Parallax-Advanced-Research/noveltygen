(define (domain :monopoly)
  (:requirements :typing :numerics :equality)
  (:types token space spacetype title stage player status color offer - int)
  (:constants
  
    PROPERTY - spacetype
    RAILROAD - spacetype
    UTILITY CHANCE CHEST GO JUST_VISITING FREE_PARKING JAIL GO_TO_JAIL TAX - spacetype

    PRE_ROLL - stage ROLL - stage MOVE - stage POST_ROLL - stage 
    VISIT - stage AUCTION - stage TURN_END - stage

    NOTITLE - title

    NOPLAYER - player

    LOST FREE JAILED - status

    NOCOLOR - color
  )
  (:predicates 
       (space-mortgaged ?s - space)
       (extra-turn)
       (just-bought-house ?s - space)
       (just-sold-house ?s - space)
       (just-obtained ?s - space)
       
       (need-maintenance ?house-cost - int ?hotel-cost - int)
       (need-share-wealth ?amount - int)
       (need-collection ?amount - int)
       (need-move ?sp - space)
       
       (nearest-of-type ?p - player ?stype - spacetype ?sp - space)
       (next-of-type-after ?stype - spacetype ?num - int ?sp - space)
       (next-of-type-after-a ?stype - spacetype ?num - int ?sp - space)
       (next-of-type-after-b ?stype - spacetype ?num - int ?sp - space)
       
       (auction-passed ?p - player)
       
       (offer-processing ?o - offer)
       (offer-made ?o - offer)
       (offer-cancelled ?o - offer)
       (offer-still-works ?o - offer)
       (included-properties-still-owned ?o - offer)
       (requested-properties-still-owned ?o - offer)
       (offer-requests-property ?o - offer ?p - space)
       (offer-includes-property ?o - offer ?p - space)
       
       
       (player-space ?p - player ?s - space)
       (same-space-type ?s1 - space ?s2 - space)
       (same-space-num ?s1 - space ?s2 - space)
       (lower-space-num ?s1 - space ?s2 - space)
       (higher-space-num ?s1 - space ?s2 - space)
       (same-owner ?s1 - space ?s2 - space)
       (same-houses ?s1 - space ?s2 - space)
       (more-houses ?s1 - space ?s2 - space)
       (fewer-houses ?s1 - space ?s2 - space)
       (same-hotels ?s1 - space ?s2 - space)
       (same-color ?s1 - space ?s2 - space)
       (lower-rent ?s1 - space ?s2 - space)
       (higher-rent ?s1 - space ?s2 - space)
  )
 
  (:fluents 
      (self) - player
      (current-player) - player
      (current-performer) - player
      (turn-stage) - stage
  
      (position-space ?i - int) - space
      (max-position) - int

      (space-type ?s - space) - spacetype
      (space-num ?s - space) - int
      (space-owned ?s - space) - player
      (space-houses ?s - space) - int
      (space-hotels ?s - space) - int
      (space-title ?s - space) - title
      (space-color ?s - space) - color
      (space-rent ?s - space) - int
      
      (player-cash ?p - player) - int
      (player-position ?p - player) - int
      (player-next ?p - player) - player
      (player-status ?p - player) - status
      (player-get-out-of-jail-frees ?p - player) - int
      (player-turns-in-jail ?p - player) - int
      (player-railroads-owned ?p - player) - int
      (player-utilities-owned ?p - player) - int
      
      (title-cost ?t - title) - int
      (title-rent-unimproved ?t - title) - int
      (title-rent-houses ?t - title ?houses - int) - int
      (title-mortgage-value ?t - title) - int
      (title-house-cost ?t - title) - int
      (title-name ?t - title) - string
      
      (monopoly-owned ?c - color) - player
      (monopoly-min-houses ?c - color) - int
      (monopoly-max-houses ?c - color) - int

      (utilities-owned-multiplier ?count - int) - int
      (utility-multiplier) - int
      (railroad-rent ?count - int) - int
      
      (current-offer) - offer
      (offer-requests-cash ?o - offer) - int
      (offer-includes-cash ?o - offer) - int
      (offer-partner ?o - offer) - player
      (offer-offerer ?o - offer) - player

      (die1-value) - int
      (die2-value) - int
      
      (just-visiting-position) - int
      (doubles-rolled-in-row) - int
      
      (available-houses) - int
      (available-hotels) - int
      
      (chance-card) - int
      (chest-card) - int
      
      (auction-last-bid) - int
      (auction-last-bidder) - player
      (auction-current-bidder) - player
  )
  
  ;; PRE_ROLL stage (see also PRE_ROLL/POST_ROLL)
  
  (:actions
	(:action pay_jail_fine
	   :parameters ()
	      :precondition 
	        (and 
	            (= (current-player) ?p)
	            (= (turn-stage) PRE_ROLL)
	            (= (player-status ?p) JAILED)
	            (> (player-cash ?p) 50)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) 50)
	            (= (player-status ?p) GETTING_OUT)
	        )
	  )
	(:action use_get_out_of_jail_card
	   :parameters ()
	      :precondition 
	        (and 
	            (= (turn-stage) PRE_ROLL)
	            (= (current-player) ?p)
	            (= (player-status ?p) JAILED)
	            (> (player-get-out-of-jail-frees ?p) 0)
	        )
	   :effect (and (- (player-get-out-of-jail-frees ?p) 1)
	                (= (player-status ?p) GETTING_OUT))
	  )
	(:action roll_die
	      :parameters ()
	   :precondition (and (= (current-player) ?p)
	                   (= (turn-stage) PRE_ROLL)
	              )
	   :effect (and (= (turn-stage) ROLL))
	  )
	(:action purchase
	   :parameters (?space - space)
	      :precondition 
	        (and 
	            (= (turn-stage) VISIT)
	            (= (current-player) ?p)
	            (= (player-position ?p) ?pos) 
	            (= (position-space ?pos) ?space)
	            (= (space-title ?space) ?title)
	            (!= (space-title ?space) NOTITLE)
	            (= (space-owned ?space) NOPLAYER)
	            (< (title-cost ?title) (player-cash ?p))
	            (= (title-rent-unimproved ?title) ?new-rent)
	            (= (title-cost ?title) ?cost)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) ?cost)
	            (= (space-owned ?space) ?p)
	            (just-obtained ?space)
	            (= (space-rent ?space) ?new-rent)
	            (= (turn-stage) POST_ROLL)
	        )
	  )
	(:action start-auction
	   :parameters ()
	      :precondition 
	        (and 
	            (= (current-player) ?p)
	            (= (turn-stage) VISIT)
	            (= (player-position ?p) ?pos) 
	            (= (position-space ?pos) ?space)
	            (!= (space-title ?space) NOTITLE)
	            (= (space-owned ?space) NOPLAYER)
	        )
	   :effect (and (= (turn-stage) AUCTION)
	                (= (auction-current-bidder) ?p)
	                (= (auction-last-bidder) NOPLAYER)
	                (= (auction-last-bid) 0)
	           )
	  )
	(:action bid-in-auction
	   :parameters (?amount - int)
	      :precondition 
	        (and 
	            (= (turn-stage) AUCTION)
	            (= (auction-current-bidder) ?p)
	            (> (player-cash ?p) ?amount)
	            (< (auction-last-bid) ?amount)
	        )
	   :effect (and (= (auction-last-bid) ?amount)
	                (= (auction-last-bidder) ?p))
	  )
	(:action pass-bid
	   :parameters ()
	      :precondition 
	        (and 
	            (= (turn-stage) AUCTION)
	            (= (auction-current-bidder) ?p)
	            (!= (auction-last-bidder) ?p)
	            (= (player-next ?p) ?next-p)
	        )
	   :effect 
	        (and 
	            (auction-passed ?p) 
	            (= (auction-current-bidder) ?next-p)
	            (= (current-performer) ?next-p)
	        )
	  )
	(:action mortgage_property
	   :parameters (?sp - space)
	      :precondition 
	        (and
	           ;(or (= (turn-stage) PRE_ROLL) (= (turn-stage) POST_ROLL))
	           (= (space-owned ?sp) ?p)
	           (not (space-mortgaged ?sp))
	           (= (space-title ?sp) ?title)
	           (= (space-color ?sp) ?color)
	           (= (title-mortgage-value ?title) ?cash)
	           (= (monopoly-max-houses ?color) 0)
	        )
	   :effect 
	        (and 
	            (space-mortgaged ?sp)
	            (= (space-rent ?sp) 0)
	            (+ (player-cash ?p) ?cash)
	        )
	  )
	(:action free_mortgage
	   :parameters (?sp - space)
	      :precondition 
	        (and
	           ;(or (= (turn-stage) PRE_ROLL) (= (turn-stage) POST_ROLL))
	           (space-mortgaged ?sp)
	           (= (space-owned ?sp) ?p)
	           (= (space-title ?sp) ?title)
	           (= (title-mortgage-value ?title) ?cash)
	           (>= (player-cash ?p) (* 1.1 ?cash))
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) (* 1.1 ?cash))
	            (not (space-mortgaged ?sp))
	            (just-obtained ?sp)
	        )
	  )
	(:action buy_house
	   :parameters (?sp - space)
	      :precondition 
	        (and
	            ;(or (= (turn-stage) PRE_ROLL) (= (turn-stage) POST_ROLL))
	            (= (space-color ?sp) ?color)
	            (= (monopoly-owned ?color) ?p)
	            (= (monopoly-min-houses ?color) ?min)
	            (> (available-houses) 0)
	            (= (space-houses ?sp) ?min)
	            (= (space-title ?sp) ?t)
	            (= (title-house-cost ?t) ?cost)
	            (>= (player-cash ?p) ?cost)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) ?cost)
	            (= (space-houses ?sp) (+ ?min 1))
	            (- (available-houses) 1)
	            (just-bought-house ?sp)
	        )
	  )
	(:action buy_hotel
	   :parameters (?sp - space)
	      :precondition 
	        (and
	            ;(or (= (turn-stage) PRE_ROLL) (= (turn-stage) POST_ROLL))
	            (= (space-color ?sp) ?color)
	            (= (monopoly-owned ?color) ?p)
	            (>= (monopoly-min-houses ?color) 4)
	            (> (available-hotels) 1)
	            (= (space-houses ?sp) 4)
	            (= (space-title ?sp) ?t)
	            (= (title-house-cost ?t) ?cost)
	            (>= (player-cash ?p) ?cost)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) ?cost)
	            (= (space-houses ?sp) 5)
	            (+ (available-houses) 4)
	            (just-bought-house ?sp)
	        )
	  )
	(:action sell_house
	   :parameters (?sp - space)
	      :precondition 
	        (and
	            ;(or (= (turn-stage) PRE_ROLL) (= (turn-stage) POST_ROLL))
	            (= (space-owned ?sp) ?p)
	            (> (space-houses ?sp) 0)
	            (= (space-color ?sp) ?color)
	            (= (monopoly-max-houses ?color) ?max)
	            (= (space-houses ?sp) ?max)
	            (= (space-title ?sp) ?t)
	            (= (title-house-cost ?t) ?cost)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) (/ ?cost 2))
	            (= (space-houses ?sp) (- ?max 1))
	            (+ (available-houses) 1)
	            (just-sold-house ?sp)
	        )
	  )
	(:action sell_hotel
	   :parameters (?sp - space)
	      :precondition 
	        (and 
	            ;(or (= (turn-stage) PRE_ROLL) (= (turn-stage) POST_ROLL))
	            (= (space-owned ?sp) ?p)
	            (= (space-houses ?sp) 5)
	            (= (space-title ?sp) ?t)
	            (= (title-house-cost ?t) ?cost)
	            (>= (available-houses) 4)
	        )
	   :effect (and (+ (player-cash ?p) (/ ?cost 2))
	                (= (space-houses ?sp) 4)
	                (- (available-houses) 4)
	           )
	  )
	(:action sell_all_color_houses
	   :parameters (?color - color)
	      :precondition 
	        (and 
	            ;(or (= (turn-stage) PRE_ROLL) (= (turn-stage) POST_ROLL))
	            (= (monopoly-owned ?color) ?p)
	
	            (= (space-color ?sp1) ?color)
	            (= (space-num ?sp1) ?n1)
	
	            (= (space-color ?sp2) ?color)
	            (!= (space-num ?sp2) ?n1)
	            (= (space-num ?sp2) ?n2)
	
	            (= (space-color ?sp3) ?color)
	            (!= (space-num ?sp3) ?n1)
	            (!= (space-num ?sp3) ?n2)
	
	            (= (space-title ?sp1) ?t)
	            (= (space-houses ?sp1) ?count1)
	            (= (space-houses ?sp2) ?count2)
	            (= (space-houses ?sp3) ?count3)
	            (= (title-house-cost ?t) ?cost)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) (/ (* ?cost (+ ?count1 (+ ?count2 ?count3))) 2))
	            (= (space-houses ?sp1) 0)
	            (= (space-houses ?sp2) 0)
	            (= (space-houses ?sp3) 0)
	            (+ (available-houses) (+ ?count1 (+ ?count2 ?count3)))
	            (just-sold-house ?sp1)
	            (just-sold-house ?sp2)
	            (just-sold-house ?sp3)
	        )
	  )
	(:action start_offer
	   :parameters (?to_player - player)
	      :precondition (= (current-offer) ?offer)
	   :effect 
	        (and 
	            (+ (current-offer) 1)
	            (= (offer-offerer ?offer) ?p)
	            (= (offer-partner ?offer) ?to_player)
	        )
	  )
	(:action add_property_include
	   :parameters (?space - space)
	      :precondition 
	        (and 
	            (= (current-offer) ?offer)
	            (= (offer-offerer ?offer) ?p)
	            (= (space-owned ?space) ?p)
	            (not (space-mortgaged ?space))
	            (= (space-color ?space) ?color)
	            (= (monopoly-max-houses ?color) 0)
	            (not (offer-includes-property ?offer ?space))
	        )
	   :effect (and (offer-includes-property ?offer ?space))
	  )
	(:action add_cash_include
	   :parameters (?cash - int)
	      :precondition 
	        (and 
	            (= (current-offer) ?offer)
	            (= (offer-offerer ?offer) ?p)
	            (= (offer-includes-cash ?offer) 0)
	            (= (offer-requests-cash ?offer) 0)
	        )
	   :effect (and (= (offer-includes-cash ?offer) ?cash))
	  )
	(:action add_property_request
	   :parameters (?space - Space)
	      :precondition 
	        (and 
	            (= (current-offer) ?offer)
	            (= (offer-offerer ?offer) ?p)
	            (= (space-owned ?space) ?partner)
	            (= (offer-partner ?offer) ?partner)
	            (not (offer-requests-property ?offer ?space))
	        )
	   :effect (and (offer-requests-property ?offer ?space))
	  )
	(:action add_cash_request
	   :parameters (?cash - int)
	      :precondition 
	        (and 
	            (= (current-offer) ?offer)
	            (= (offer-offerer ?offer) ?p)
	            (= (offer-requests-cash ?offer) 0)
	            (= (offer-includes-cash ?offer) 0)
	        )
	   :effect (and (= (offer-requests-cash ?offer) ?cash))
	  )
	(:action make_trade_offer
	   :parameters ()
	      :precondition 
	        (and 
	            (= (current-offer) ?offer)
	            (= (offer-offerer ?offer) ?p)
	            (not (offer-made ?offer))
	            (not (offer-cancelled ?offer))
	        )
	   :effect (and (offer-made ?offer))
	  )
	(:action accept_trade_offer
	   :parameters (?offer - offer)
	      :precondition 
	        (and 
	            (= (offer-partner ?offer) ?p)
	            (not (offer-cancelled ?offer))
	            (offer-still-works ?offer)
	        )
	   :effect (and (offer-processing ?offer))
	  )
	(:action concluded_actions
	   :parameters ()
	      :precondition 
	        (and 
	            (= (current-player) ?p)
	            (= (turn-stage) POST_ROLL)
	        )
	   :effect 
	        (and (= (turn-stage) TURN_END))
	  )
	(:action skip_turn
	   :parameters ()
	      :precondition 
	        (and  
	            (= (current-player) ?p) 
	            (= (player-status ?p) jailed) 
	            (< (player-turns-in-jail ?p) 3) 
	            (= (player-next ?p) ?next)
	        )
	   :effect 
	        (and 
	            (+ (player-turns-in-jail ?p) 1) 
	            (= (turn-stage) TURN_END) 
	            (= (current-player) ?next)
	            (= (current-performer) ?next)
	        )
	  )
)
   
  ;; ROLL stage

  
  (:events
	(:event die-roll
	   :parameters ()
	   :precondition (= (turn-stage) ROLL)
	   :effect (and ;(randomize (die1-value) (:uniform 1 6))
	                ;(randomize (die2-value) (:uniform 1 6))
	                (= (die1-value) 3)
	                (= (die2-value) 3)
	                (= (turn-stage) MOVE))
	  )
	(:event move
	   :parameters ()
	   :precondition (and (= (turn-stage) MOVE) (= (current-player) ?p)
	                   (= (die1-value) ?die1)
	                   (= (die2-value) ?die2)
	                   (= (max-position) ?max)
	                   (= (player-status ?p) FREE))
	   :effect (and (= (player-position ?p) (% (+ ?die1 (+ ?die2 (player-position ?p))) ?max))
	                (= (turn-stage) VISIT))
	  )
	(:event collect-salary
	   :parameters ()
	   :precondition 
	        (and 
	            (= (turn-stage) MOVE) 
	            (= (current-player) ?p)
	            (= (die1-value) ?die1)
	            (= (die2-value) ?die2)
	            (= (max-position) ?max)
	            (= (player-status ?p) FREE)
	            (>= (+ ?die1 (+ ?die2 (player-position ?p))) ?max)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 200)
	            (= (turn-stage) VISIT)
	        )
	  )
	(:event doubles-in-jail
	   :parameters ()
	   :precondition (and (= (current-player) ?p)
	                   (= (turn-stage) MOVE)
	                   (= (die1-value) ?d)
	                   (= (die2-value) ?d)
	                   (= (player-status ?p) JAILED))
	   :effect (and (= (player-status ?p) GETTING_OUT))
	  )
	(:event doubles-into-jail
	   :parameters ()
	   :precondition (and (= (current-player) ?p)
	                   (= (turn-stage) MOVE)
	                   (= (die1-value) ?d)
	                   (= (die2-value) ?d)
	                   (= (doubles-rolled-in-row) 2)
	                   (not (extra-turn))
	                   (= (player-status ?p) FREE))
	   :effect (and (= (player-status ?p) CAUGHT)
	                (= (doubles-rolled-in-row) 0))
	  )
	(:event doubles-extra-turn
	   :parameters ()
	   :precondition (and
	                   (= (turn-stage) MOVE)
	                   (= (die1-value) ?d)
	                   (= (die2-value) ?d)
	                   (< (doubles-rolled-in-row) 2)
	                   (not (extra-turn)))
	   :effect (and (extra-turn)
	                (+ (doubles-rolled-in-row) 1))
	  )
	(:event monopolizes
	   :parameters ()
	   :precondition 
	        (and 
	            (just-obtained ?space)
	            (!= (space-color ?space) NOCOLOR)
	
	            (= (space-color ?space) ?color)
	            (= (space-owned ?space) ?p)
	            (= (space-num ?space) ?n1)
	
	            (= (space-color ?sp2) ?color)
	            (= (space-owned ?sp2) ?p)
	            (!= (space-num ?sp2) ?n1)
	            (= (space-num ?sp2) ?n2)
	
	            (= (space-color ?sp3) ?color)
	            (= (space-owned ?sp3) ?p)
	            (!= (space-num ?sp3) ?n1)
	            (!= (space-num ?sp3) ?n2)
	
	            (= (space-title ?space) ?t1)
	            (= (space-title ?sp2) ?t2)
	            (= (space-title ?sp3) ?t3)
	
	        )
	   :effect 
	        (and 
	            (= (monopoly-owned ?color) ?p)
	            (= (space-rent ?space) (* 2 (title-rent-unimproved ?t1)))
	            (= (space-rent ?sp2) (* 2 (title-rent-unimproved ?t2)))
	            (= (space-rent ?sp3) (* 2 (title-rent-unimproved ?t3)))
	        )
	  )
	(:event update-railroad-rent
	   :parameters (?rr - space)
	   :precondition 
	        (and 
	            (just-obtained ?space)
	            (= (space-type ?space) RAILROAD)
	            (= (space-owned ?space) ?owner)
	            (= (player-railroads-owned ?owner) ?roads)
	            ;(assign ?new-roads (+ 1 ?roads))
	            (= (railroad-rent ?new-roads) ?rent)
	
	            (= (space-owned ?rr) ?owner)
	            (= (space-type ?rr) RAILROAD)
	        )
	   :effect 
	        (and 
	            (= (space-rent ?rr) ?rent)
	            (= (player-railroads-owned ?owner) ?new-roads)
	        )
	  )
	(:event update-utilities-owned
	   :parameters ()
	   :precondition 
	        (and 
	            (just-obtained ?space)
	            (= (space-type ?space) UTILITY)
	            (= (space-owned ?space) ?owner)
	        )
	   :effect (and (+ (player-utilities-owned ?owner) 1))
	  )
	(:event update-utility-multiplier-2
	   :parameters ()
	   :precondition 
	        (and 
	            (= (player-utilities-owned ?any-owner) 2)
	            ;(= (utilities-owned-multiplier 2) ?mult)
	            (!= (utility-multiplier) ?mult)
	        )
	   :effect (and (= (utility-multiplier) ?mult))
	  )
	(:event update-utility-multiplier-1
	   :parameters ()
	   :precondition 
	        (and 
	            (= (player-utilities-owned ?any-owner) 1)
	            ;(= (utilities-owned-multiplier 1) ?mult)
	            (!= (utility-multiplier) ?mult)
	        )
	   :effect (and (= (utility-multiplier) ?mult))
	  )
	(:event rent-set
	   :parameters ()
	   :precondition (just-obtained ?space)
	   :effect (and (not (just-obtained ?space)))
	  )
	(:event pay
	   :parameters ()
	   :precondition (and (= (current-player) ?p)
	                   (= (turn-stage) VISIT)
	                   (= (player-position ?p) ?pos) 
	                   (= (position-space ?pos) ?space)
	                   (= (space-owned ?space) ?owner)
	                   (= (space-rent ?space) ?cost)
	                   (> (space-rent ?space) 0)
	              )
	   :effect 
	        (and 
	            (- (player-cash ?p) ?cost)
	            (+ (player-cash ?owner) ?cost)
	            (= (turn-stage) POST_ROLL)
	        )
	  )
	(:event pay-utility
	   :parameters ()
	   :precondition (and (= (current-player) ?p)
	                   (= (turn-stage) VISIT)
	                   (= (player-position ?p) ?pos) 
	                   (= (position-space ?pos) ?space)
	                   (= (space-type ?space) UTILITY)
	                   (!= (space-owned ?space) NOPLAYER)
	                   (= (space-owned ?space) ?owner)
	                   (= (utility-multiplier) ?mult)
	              )
	   :effect 
	        (and 
	            (- (player-cash ?p) (* ?mult (+ (die1-value) (die2-value))))
	            (+ (player-cash ?owner) (* ?mult (+ (die1-value) (die2-value))))
	            (= (turn-stage) POST_ROLL)
	        )
	  )
	(:event stay-free
	   :parameters ()
	   :precondition (and (= (current-player) ?p)
	                   (= (turn-stage) VISIT)
	                   (= (player-position ?p) ?pos) 
	                   (= (position-space ?pos) ?space)
	                   (space-mortgaged ?space)
	              )
	   :effect 
	        (and 
	            (= (turn-stage) POST_ROLL)
	        )
	  )
	(:event fail-to-pay
	   :parameters ()
	   :precondition (and (= (current-player) ?p)
	                   (= (turn-stage) VISIT)
	                   (= (player-position ?p) ?pos) 
	                   (= (position-space ?pos) ?space)
	                   (!= (space-title ?space) NOTITLE)
	                   (!= (space-owned ?space) NOPLAYER)
	                   (= (space-owned ?space) ?owner)
	                   (= (space-rent ?space) ?cost)
	                   (< (player-cash ?p) ?cost)
	                   (= (player-cash ?p) ?cash)
	              )
	   :effect 
	        (and 
	            (= (player-cash ?p) 0)
	            (+ (player-cash ?owner) ?cash)
	            (= (player-status ?p) LOST)
	            (= (turn-stage) TURN_END)
	        )
	  )
	(:event visit-chance
	   :parameters ()
	   :precondition 
	        (and 
	            (= (current-player) ?p)
	            (= (turn-stage) VISIT)
	            (= (player-position ?p) ?pos) 
	            (= (position-space ?pos) ?space)
	            (= (space-type ?space) CHANCE)
	            ;(assign ?chance-card (:uniform 1 17))
	        )
	   :effect 
	        (and 
	            (= (chance-card) ?chance-card)
	            (= (turn-stage) POST_ROLL)
	        )
	  )
	(:event chance-finished
	   :parameters ()
	   :precondition 
	        (and 
	            (!= (chance-card) -1)
	        )
	   :effect 
	        (and 
	            (= (chance-card) -1)
	        )
	  )
	(:event chance-go-to-jail
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 1)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (= (player-status ?p) CAUGHT)
	        )
	  )
	(:event chance-get-out-of-jail-free
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 2)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-get-out-of-jail-frees ?p) 1)
	        )
	  )
	(:event chance-go-to-illinois-avenue
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 3)
	            (= (title-name ?t) Illinois_Avenue)
	            (= (space-title ?sp) ?t)
	        )
	   :effect 
	        (and 
	            (need-move ?sp)
	        )
	  )
	(:event chance-go-to-st-charles
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 4)
	            (= (title-name ?t) St_Charles_Place)
	            (= (space-title ?sp) ?t)
	        )
	   :effect 
	        (and 
	            (need-move ?sp)
	        )
	  )
	(:event chance-go-to-nearest-utility-pay-10-mult
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 5)
	            (= (current-player) ?p)
	            (nearest-of-type ?p UTILITY ?sp)
	        )
	   :effect 
	        (and 
	            (need-move ?sp)
	            (= (utility-multiplier) 10)
	            (= (turn-stage) VISIT)
	        )
	  )
	(:event chance-go-to-nearest-railroad-pay-double
	   :parameters ()
	   :precondition 
	        (and 
	            ;(or (= (chance-card) 6) (= (chance-card) 7))
	            (= (current-player) ?p)
	            (nearest-of-type ?p RAILROAD ?sp)
	            (= (space-rent ?sp) ?rent)
	            (= (space-owned ?sp) ?owner)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) ?rent)
	            (+ (player-cash ?owner) ?rent)
	            (need-move ?sp)
	            (= (turn-stage) VISIT)
	        )
	  )
	(:event chance-back-3-spaces
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 9)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (- (player-position ?p) 3)
	            (= (turn-stage) VISIT)
	        )
	  )
	(:event chance-go-to-reading-railroad
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 10)
	            (= (title-name ?t) Reading_Railroad)
	            (= (space-title ?sp) ?t)
	        )
	   :effect 
	        (and 
	            (need-move ?sp)
	        )
	  )
	(:event chance-go-to-boardwalk
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 11)
	            (= (title-name ?t) Boardwalk)
	            (= (space-title ?sp) ?t)
	        )
	   :effect 
	        (and 
	            (need-move ?sp)
	        )
	  )
	(:event chance-pay-poor-tax
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 12)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) 15)
	        )
	  )
	(:event chance-building-loan-matures
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 13)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 150)
	        )
	  )
	(:event chance-win-crossword-competition
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 14)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 100)
	        )
	  )
	(:event chance-bank-dividend
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 15)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 50)
	        )
	  )
	(:event chance-advance-to-go
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chance-card) 17)
	            (= (space-num ?sp) 0)
	        )
	   :effect 
	        (and 
	            (need-move ?sp)
	        )
	  )
	(:event maintain-property-without-hotel
	   :parameters (?sp - space)
	   :precondition 
	        (and 
	            (need-maintenance ?house-cost ?hotel-cost)
	            (= (space-owned ?sp) ?p)
	            (= (current-player) ?p)
	            (= (space-houses ?sp) ?n)
	            (< (space-houses ?sp) 5)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) (* ?n ?house-cost))
	            (not (need-maintenance ?house-cost ?hotel-cost))
	        )
	  )
	(:event maintain-property-with-hotel
	   :parameters (?sp - space)
	   :precondition 
	        (and 
	            (need-maintenance ?house-cost ?hotel-cost)
	            (= (space-owned ?sp) ?p)
	            (= (current-player) ?p)
	            (= (space-houses ?sp) 5)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) ?hotel-cost)
	            (not (need-maintenance ?house-cost ?hotel-cost))
	        )
	  )
	(:event bribe-for-election
	   :parameters (?o - player)
	   :precondition 
	        (and 
	            (need-share-wealth ?amount)
	            (= (current-player) ?p)
	            (= (player-cash ?o) ?any)
	            (!= (current-player) ?o)
	            (!= (player-status ?o) lost)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) ?amount)
	            (+ (player-cash ?o) ?amount)
	            (not (need-share-wealth ?amount))
	        )
	  )
	(:event do-free-trip-move
	   :parameters ()
	   :precondition 
	        (and 
	            (= (current-player) ?p)
	            (need-move ?sp)
	            (= (space-num ?sp) ?pos)
	        )
	   :effect 
	        (and 
	            (= (player-position ?p) ?pos)
	            (not (need-move ?sp))
	        )
	  )
	(:event do-free-trip-salary
	   :parameters ()
	   :precondition 
	        (and 
	            (= (current-player) ?p)
	            (need-move ?sp)
	            (= (player-position ?p) ?pos)
	            (< (space-num ?sp) ?pos)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 200)
	        )
	  )
	(:event visit-community-chest
	   :parameters ()
	   :precondition 
	        (and 
	            (= (current-player) ?p)
	            (= (turn-stage) VISIT)
	            (= (player-position ?p) ?pos) 
	            (= (position-space ?pos) ?space)
	            (= (space-type ?space) CHEST)
	            ;(assign ?chest-card (:uniform 1 17))
	        )
	   :effect 
	        (and 
	            (= (chest-card) ?chest-card)
	            (= (turn-stage) POST_ROLL)
	        )
	  )
	(:event chest-go-to-jail
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 1)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (= (player-status ?p) CAUGHT)
	        )
	  )
	(:event chest-get-out-of-jail-free
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 2)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-get-out-of-jail-frees ?p) 1)
	        )
	  )
	(:event chest-sale-of-stock
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 3)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 45)
	        )
	  )
	(:event chest-bank-error
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 4)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 200)
	        )
	  )
	(:event chest-doctor-fee
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 5)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) 50)
	        )
	  )
	(:event chest-holiday-fund-matures
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 6)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 100)
	        )
	  )
	(:event chest-income-tax-refund
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 7)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 20)
	        )
	  )
	(:event chest-life-insurance-matures
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 8)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 100)
	        )
	  )
	(:event chest-hospital-fee
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 9)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) 100)
	        )
	  )
	(:event chest-school-fee
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 10)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) 150)
	        )
	  )
	(:event chest-consultancy-fee
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 11)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 25)
	        )
	  )
	(:event chest-beauty-contest
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 12)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 10)
	        )
	  )
	(:event chest-inherit-money
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 13)
	            (= (current-player) ?p)
	        )
	   :effect 
	        (and 
	            (+ (player-cash ?p) 100)
	        )
	  )
	(:event chest-advance-to-go
	   :parameters ()
	   :precondition 
	        (and 
	            (= (chest-card) 14)
	            (= (space-num ?sp) 0)
	        )
	   :effect 
	        (and 
	            (need-move ?sp)
	        )
	  )
	(:event collect-money
	   :parameters (?o - player)
	   :precondition 
	        (and 
	            (need-collection ?amount)
	            (= (current-player) ?p)
	            (= (player-cash ?o) ?any)
	            (!= (current-player) ?o)
	            (!= (player-status ?o) lost)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?o) ?amount)
	            (+ (player-cash ?p) ?amount)
	            (not (need-collection ?amount))
	        )
	  )
	(:event visit-go-to-jail
	   :parameters ()
	   :precondition 
	        (and 
	            (= (current-player) ?p)
	            (= (turn-stage) VISIT)
	            (= (player-position ?p) ?pos) 
	            (= (position-space ?pos) ?space)
	            (= (space-type ?space) GO_TO_JAIL)
	        )
	   :effect 
	        (and 
	            (= (player-status ?p) CAUGHT)
	            (= (turn-stage) POST_ROLL)
	        )
	  )
	(:event visit-boring
	   :parameters ()
	   :precondition 
	        (and 
	            (= (turn-stage) VISIT)
	            (= (current-player) ?p)
	            (= (player-position ?p) ?pos) 
	            (= (position-space ?pos) ?space)
	            ;(or (= (space-type ?space) GO)
	            ;    (= (space-type ?space) FREE_PARKING)
	            ;    (= (space-type ?space) JUST_VISITING)
	            ;)
	        )
	   :effect 
	        (and 
	            (= (turn-stage) POST_ROLL)
	        )
	  )
	(:event goto-next-bidder
	   :parameters ()
	   :precondition 
	        (and 
	            (= (turn-stage) AUCTION)
	            (= (auction-current-bidder) ?p)
	            (auction-passed ?p)
	            (= (player-status ?p) LOST)
	            (= (player-next ?p) ?next-p)
	        )
	   :effect 
	        (and 
	            (= (auction-current-bidder) ?next-p)
	            (= (current-performer) ?next-p)
	        )
	  )
	(:event end-auction-win
	   :parameters ()
	   :precondition 
	        (and 
	            (= (turn-stage) AUCTION)
	            (= (auction-current-bidder) ?p)
	            (= (auction-last-bidder) ?p)
	            (not (auction-passed ?p))
	            (> (auction-last-bid) 0)
	            (= (auction-last-bid) ?amount)
	            (= (current-player) ?cur-p)
	            (player-space ?cur-p ?space)
	            (= (space-title ?space) ?title)
	            (= (title-rent-unimproved ?title) ?new-rent)
	            (= (current-player) ?next)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p) ?amount)
	            (= (space-owned ?space) ?p)
	            (just-obtained ?space)
	            (= (space-rent ?space) ?new-rent)
	            (= (turn-stage) POST_ROLL)
	            (= (current-performer) ?next)
	        )
	  )
	(:event end-auction-no-bid
	   :parameters ()
	   :precondition 
	        (and 
	            (= (turn-stage) AUCTION)
	            (= (current-player) ?p)
	            (= (auction-current-bidder) ?p)
	            (= (auction-last-bidder) NOPLAYER)
	            (auction-passed ?p)
	        )
	   :effect 
	        (and 
	            (= (current-performer) ?p)
	            (= (turn-stage) POST_ROLL)
	        )
	  )
	(:event reset-bid-pass-bid
	   :parameters (?p - player)
	   :precondition 
	        (and 
	            (= (turn-stage) POST_ROLL)
	            (auction-passed ?p)
	        )
	   :effect 
	        (and 
	            (not (auction-passed ?p))
	        )
	  )
	(:event buy-done
	   :parameters ()
	   :precondition (and (just-bought-house ?sp))
	   :effect (and (not (just-bought-house ?sp)))
	  )
	(:event update-max-houses-buy
	   :parameters ()
	   :precondition 
	        (and 
	            (just-bought-house ?sp1)
	            (!= (space-color ?sp1) NOCOLOR)
	            (= (monopoly-max-houses ?color) ?max)
	            (> (space-houses ?sp1) ?max)
	            (= (space-houses ?sp1) ?new-max)
	        )
	   :effect 
	        (and (= (monopoly-max-houses ?color) ?new-max))
	  )
	(:event update-min-houses
	   :parameters ()
	   :precondition 
	        (and 
	            (just-bought-house ?sp1)
	            (!= (space-color ?sp1) NOCOLOR)
	            (= (space-houses ?sp1) ?max)
	
	            (= (space-color ?sp1) ?color)
	            (= (space-num ?sp1) ?n1)
	
	            (= (space-color ?sp2) ?color)
	            (= (space-houses ?sp2) ?max)
	            (!= (space-num ?sp2) ?n1)
	            (= (space-num ?sp2) ?n2)
	
	            (= (space-color ?sp3) ?color)
	            (= (space-houses ?sp3) ?max)
	            (!= (space-num ?sp3) ?n1)
	            (!= (space-num ?sp3) ?n2)
	        )
	   :effect (and (= (monopoly-min-houses ?color) ?max))
	  )
	(:event update-non-monopoly-rent
	   :parameters (?sp - space)
	   :precondition 
	        (and 
	            (just-obtained ?sp)
	            (= (space-owned ?sp) ?p)
	            (= (space-color ?sp) ?color)
	            (!= (monopoly-owned ?color) ?p)
	            (= (space-title ?sp) ?t)
	            (= (space-type ?sp) PROPERTY)
	            (= (title-rent-unimproved ?t) ?new-rent)
	        )
	   :effect 
	        (and 
	            (= (space-rent ?sp) ?new-rent)
	        )
	  )
	(:event update-monopoly-rent-no-house
	   :parameters (?sp - space)
	   :precondition 
	        (and 
	            ;(or (just-obtained ?sp) (just-sold-house ?sp))
	            (= (space-color ?sp) ?color)
	            (!= (monopoly-owned ?color) NOPLAYER)
	            (= (space-title ?sp) ?t)
	            (= (title-rent-unimproved ?t) ?new-rent)
	            (= (space-houses ?sp) 0)
	        )
	   :effect 
	        (and 
	            (= (space-rent ?sp) (* 2 ?new-rent))
	        )
	  )
	(:event update-monopoly-rent-with-house
	   :parameters (?sp - space)
	   :precondition 
	        (and 
	            ;(or (just-bought-house ?sp) (just-sold-house ?sp))
	            (= (space-color ?sp) ?color)
	            (!= (monopoly-owned ?color) NOPLAYER)
	            (= (space-title ?sp) ?t)
	            (= (space-houses ?sp) ?houses)
	            (> (space-houses ?sp) 0)
	            (= (title-rent-houses ?t ?houses) ?new-rent)
	        )
	   :effect 
	        (and 
	            (= (space-rent ?sp) ?new-rent)
	        )
	  )
	(:event sold-done
	   :parameters ()
	   :precondition (and (just-sold-house ?sp))
	   :effect (and (not (just-sold-house ?sp)))
	  )
	(:event update-min-houses-sell
	   :parameters ()
	   :precondition (and (just-sold-house ?sp1)
	                      (!= (space-color ?sp1) NOCOLOR)
	                      (= (monopoly-min-houses ?color) ?min)
	                      (< (space-houses ?sp1) ?min)
	                      (= (space-houses ?sp1) ?new-min)
	                 )
	   :effect (and (= (monopoly-min-houses ?color) ?new-min)
	           )
	  )
	(:event update-max-houses-sell
	   :parameters ()
	   :precondition (and (just-sold-house ?sp1)
	                      (!= (space-color ?sp1) NOCOLOR)
	                      (= (space-houses ?sp1) ?min)
	
	                      (= (space-color ?sp1) ?color)
	                      (= (space-num ?sp1) ?n1)
	
	                      (= (space-color ?sp2) ?color)
	                      (= (space-houses ?sp2) ?min)
	                      (!= (space-num ?sp2) ?n1)
	                      (= (space-num ?sp2) ?n2)
	                      
	                      (= (space-color ?sp3) ?color)
	                      (= (space-houses ?sp3) ?min)
	                      (!= (space-num ?sp3) ?n1)
	                      (!= (space-num ?sp3) ?n2)
	                 )
	   :effect (and (= (monopoly-max-houses ?color) ?min)
	           )
	  )
	(:event transfer_included_cash
	   :parameters (?offer - offer)
	   :precondition 
	        (and 
	            (offer-processing ?offer)
	            (= (offer-includes-cash ?offer) ?cash)
	            (= (offer-offerer ?offer) ?p1)
	            (= (offer-partner ?offer) ?p2)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p1) ?cash)
	            (+ (player-cash ?p2) ?cash)
	        )
	  )
	(:event transfer_requested_cash
	   :parameters (?offer - offer)
	   :precondition 
	        (and 
	            (offer-processing ?offer)
	            (= (offer-requests-cash ?offer) ?cash)
	            (= (offer-offerer ?offer) ?p1)
	            (= (offer-partner ?offer) ?p2)
	        )
	   :effect 
	        (and 
	            (- (player-cash ?p2) ?cash)
	            (+ (player-cash ?p1) ?cash)
	        )
	  )
	(:event transfer_included_property
	   :parameters (?offer - offer)
	   :precondition 
	        (and 
	            (offer-processing ?offer)
	            (offer-includes-property ?offer ?space)
	            (= (offer-partner ?offer) ?p2)
	        )
	   :effect 
	        (and 
	            (= (space-owned ?space) ?p2)
	        )
	  )
	(:event transfer_requested_property
	   :parameters (?offer - offer)
	   :precondition 
	        (and 
	            (offer-processing ?offer)
	            (offer-requests-property ?offer ?space)
	            (= (offer-offerer ?offer) ?p1)
	        )
	   :effect 
	        (and 
	            (= (space-owned ?space) ?p1)
	        )
	  )
	(:event offer_finishes
	   :parameters (?offer - offer)
	   :precondition 
	        (and 
	            (offer-processing ?offer)
	        )
	   :effect 
	        (and 
	            (not (offer-processing ?offer))
	            (offer-cancelled ?offer)
	        )
	  )
	(:event offer-expires
	   :parameters (?offer - offer)
	   :precondition
	        (and
	            (offer-made ?offer)
	            (not (offer-cancelled ?offer))
	        )
	   :effect
	        (and 
	            (offer-cancelled ?offer)
	        )
	   )
	(:event progress-turn
	   :parameters ()
	   :precondition 
	        (and 
	            (= (turn-stage) TURN_END)
	            (= (current-player) ?p)
	            (= (player-next ?p) ?next)
	            (not (extra-turn))
	        )   
	   :effect 
	        (and 
	            (= (turn-stage) PRE_ROLL)
	            (= (current-player) ?next)
	            (= (current-performer) ?next)
	            (= (doubles-rolled-in-row) 0)
	        )
	   )
	(:event start-extra-turn
	   :parameters ()
	   :precondition 
	        (and 
	            (= (turn-stage) TURN_END)
	            (extra-turn)
	        )
	   :effect (and (= (turn-stage) PRE_ROLL)
	                (not (extra-turn))
	           )
	   )
	(:event move-on
	   :parameters ()
	   :precondition 
	        (and 
	            (= (current-player) ?p)
	            (= (player-status ?p) LOST)
	            (= (player-next ?p) ?next)
	        )
	   :effect 
	        (and 
	            (= (turn-stage) PRE_ROLL)
	            (= (current-player) ?next)
	            (= (current-performer) ?next)
	        )
	  )
	(:event enters-jail
	   :parameters ()
	   :precondition 
	        (and (= (player-status ?p) CAUGHT))
	   :effect 
	        (and 
	            (= (player-status ?p) JAILED)
	            (= (player-position ?p) -1)
	            (= (player-turns-in-jail ?p) 0)
	            (= (turn-stage) TURN_END)
	        )
	  )
	(:event leave-jail
	   :parameters ()
	   :precondition 
	        (and 
	            (= (current-player) ?p)
	            (= (player-status ?p) GETTING_OUT)
	            (= (just-visiting-position) ?new-spot)
	        )
	   :effect 
	        (and 
	            (= (player-status ?p) FREE)
	            (= (player-position ?p) ?new-spot)
	        )
	  )
)  
  
  ;; MOVE stage
  
    
  
    
   
  
  ;; VISIT stage - unowned property
  
    
     

  
    
    
    
  
    

    
   
  
  ;; VISIT stage - owned property

    
  
  
    
  ;; VISIT stage - chance
    
  
  
  

  

  
    
    
  ;(;:event chance-general-repairs
  ; :parameters ()
  ; :precondition
  ;      (and
  ;          (= (chance-card) 8)
  ;      )
  ; :effect
  ;      (and
  ;          (need-maintenance 25 100)
  ;      )
  ;)

  
  
  
  
  
  
    
  ;(;:event chance-elected-board-chairman
  ; :parameters ()
  ; :precondition
  ;      (and
  ;          (= (chance-card) 16)
  ;      )
  ; :effect
  ;      (and
  ;          (need-share-wealth 50)
  ;      )
  ;)

  
  
  
  
  
  
  ;; VISIT stage - community chest
    
  ;(;:event chest-finished
   ;:parameters ()
   ;:precondition
   ;     (and
   ;         (!= (chest-card) -1)
   ;     )
   ;:effect
   ;     (and
   ;         (= (chest-card) -1)
   ;     )
  ;)

  
  
  
  
  
  
  
  
  
  
  
  
  
  ;(;:event chest-opera-night
  ; :parameters ()
  ; :precondition
  ;      (and
  ;          (= (chest-card) 13)
  ;      )
  ; :effect
  ;      (and
  ;          (need-collection 50)
  ;      )
  ;)

  
  ;(;:event chest-street-repairs
  ; :parameters ()
  ; :precondition
  ;      (and
  ;          (= (chest-card) 15)
  ;      )
  ; :effect
  ;      (and
  ;          (need-maintenance 40 115)
  ;      )
  ;)

  ;(;:event chest-birthday
  ; :parameters ()
  ; :precondition
  ;      (and
  ;          (= (chest-card) 16)
  ;      )
  ; :effect
  ;      (and
  ;          (need-collection 10)
  ;      )
  ;)

    
  
  ;; VISIT stage - go to jail

  

  ;; VISIT stage - everything else

  
  ;; AUCTION stage
  
    
    
     
    
    
  
  ;; PRE_ROLL/POST_ROLL stage

  
  
    
    
  
  

  
  
    
  
  
  
  
  
  
  

  
  

  
  
  
  
  
  
  
  
  
    
  ;; TURN_END stage
    
    
    
  
  ;; General skip eliminated player events
    
  ;; General Jail events
  
  
    
  
  ;; GNOME action, use uncertain


  )


